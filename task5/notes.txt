ЛАБА 5 (по счету древних Zетников, так lab8) 

"ВЛИЯНИЕ КЕШ ПАМЯТИ НА ВРЕМЯ ОБРАБОТКИ МАССИВОВ":

Что нужно сделать:

1) Написать программу, многократно выполняющую обход массива заданного размера тремя
способами (прямой, обратный, случайный)
2) Для каждого размера массива и способа обхода измерить среднее время доступа к одному
элементу (в тактах процессора). Построить графики зависимости среднего времени
доступа от размера массива. Каждый последующий размер массива увеличивать в 1.2 размера
3) Определить размеры кеш памяти точным образом (документация, утилита, сис. файл
proc/cpuinfo)
4) На основе графиков:
    - оценить размеры кэш-памяти различных уровней, обосновать ответ, сопоставить 
    результат с известными реальными значениями;
    - определить размеры массива, при которых время доступа к элементу массива при 
    случайном обходе больше, чем при прямом или обратном; объяснить.

Лайфхаки от Власенко:
  - инфу о процессоре можно чекнуть в proc/cpuinfo
  - лучше увеличивать размер массива в 1.2 раза, чтобы график был менее грубым и 
более наглядным
  - для замерения времени лучше использовать rdtsc, тк он возвращает число тактов
  - в начале программы перед началом счета необходимо прогреть процессор (около 1 
секунды погонять пустой цикл с каким нибудь рассчетом, умножением матриц например), 
для того, чтобы проц разогнал частоту до стандартного уровня
  - Еще стоит сделать 1 прогон цикла «for (k=0, i=0; i&lt;N*K; i++) k = x[k];» «вхолостую», то есть без
замера времени. Эта операция называется «прогрев кэша», когда из него вытесняются все
ненужные «мусорные» данные.
  - Так же написал, что лучше компилировать с ключом -O1, а не -O0, тк в -O0, 
компилятор может разместить переменные, фигурирующие в цикле на стеке, и тогда будет
много доп. обращений к памяти, резко увеличивающих время. время. С другой стороны, поскольку
будут применены оптимизации, компилятор может выкинуть весь цикл как ненужный. Чтобы он
этого не делал, нужно после завершения замера времени изобразить “использование”
полученного в цикле значения, например, так:
    if (k==12345) printf(“Wow!”);
Также следует поступить после «холостых» вычислений для выхода процессора на максимальную
частоту и после прогрева кэша.  

Пока что, после прочтения власенковского комментария нихуя не понятно ровным счетом,
нужно курить пдфку и разбиратся.

1 глава 
  - представляет чисто теоретический интерес, когда буду готовится к 
сдаче лабы, надо будет разобрать и еще доп материалы покурить естественно

2 глава
  2.1 - рассказывает как выбирать диапазон размеров массива. 
    - N_min -- заведомо меньше, чем размер кэш-памяти данных 1 уровня (Например: 1КБайт -- 256 int32_t)
    - N_max -- заведомо больше, чем размер кэш-памяти данных последнего уровня
    
    - Получается, что мы перебираем N, от N_min до N_max, на каждом шаге, увеличивая N в 1.2 раза. 
    - Теперь нужно узнать каие уровни кэша есть у меня на машине и их размеры:

    - Крч после просмотра выводов cpuinfo, CPU-X, lscpu оказалось во первых, что у меня Кэш L1 разделен
на отдельно, кеш для инструкций и для данных. Что соответствует Гарвардской архитектуре лол, а я думал
она уже нигде не применяется. 
//TODO: Прочитать про гарвардскую архитектуру, думаю Власенко не меньше моего ахуеет когда увидит это и
может немног доебатся.
    - Еще странный момент что инстансов L1 и L2 у меня столько же, сколько и ядер. Однако, у L3 два 
инстанса всего, хотя ядер 6 всего. На эту тему тоже мб Власенкодо может доебатся.
    - Итак, у меня размер иснтанса L1 - 32KB, тогда N_min возьмем 16Кбайт -- 4096 интов
    - А размер, инстанса L3 -  4Mбайт, тогда N_max возьмем 8Мбайт -- 2097152 интов
    //TODO: Расспросить у Сани/Дениса как они выбирали размеры, мб в два раза разницы слишком дохуя
