1. Регистры
  - Регистр -- небольшой объем памяти, размещенной на процессоре.
  - Доступ к данным из регистров намного быстрее доступа из RAM.

1.1. Регистры общего назначения
  - Размер регистра на 64 битном процессоре -- 64 бита (8 байт).
  - К регистрам можно обращатся по частям:
      например:
        -%rax - регистр длиной 64 бита
        -%eax - первые 32 бита rax
        -%ax - первые 16 битов eax и первые 16 битов rax
        -%al - [0,7] - биты ax
        -%ah - [8, 16] - биты ax
  - Список регистров:
      -%rax - (a - acumulator register) - аккумулятор, применятся для хранения
результатов промежуточных вычислений
      -%rbx - (b - base register) - базовый регистр, применяется для хранения
указателя (адреса) на некоторый объект в памяти.
      -%rcx - (c - count register) - счетчик, его неявно используют некоторые
команды для организации циклов
      -%rdx - (d - data register) - регистр данных, используется  для хранения
результатов промежуточных вычислений и ввода-вывода
      
      -%rsp - (sp - stack pointer register) - указатель стека. Содержит адрес
вершины стека
      -%rbp - (bp - base pointer register) - указатель базы кадра стека. 
Предназначен для организации произвольного доступа к данным внутри стека.
      -%rsi - (si - source index register) - индекс источника, в цепочечных
операциях содержит указатель на текущий элемент-источник.
      -%rdi - (di - destination index register) - индекс ппримемника, содержит
указатель на текущий элемент-приемник.

2. Стек
  - Стек - область памяти, у которой определена вершина (%rsp). Поместить 
новый элемент можно только на вершину стека, при этом новый элемент становится
вершиной. Достать из стека можно только верхний элемент, при этом вершиной 
становится следущий элемент.
  - На x86 стек растет в сторону младших адресов. Последний записанный в стек
элемент будет расположен по адресу младше остальных элементов стека (справа 
налево)

3. Команды
  - Команды ассемблера - это те инструкции, которые будет испольнять процессор.
Каждая команда состоит и операции и операндов. Операндов может быть от 0 до 3.
В роли операнда могут выступать:
    о конкретное значение, известное на этапе компиляции, например числовая 
константа или символ. Записываются при помощи $, например $10, $hello_str. Эти
операнды называются непосредственными.
    о регистр
    о указатель на ячейку в памяти
    о неявный операнд (для некоторых команд один из операндов постоянен и его
не пишут, хотя он используется)
  
  - Почти у каждой команды можно определить операнд-источник (из него команда)
читает данные и операнд-назначение (в него записывет). Общий синтакс такой:
    о Операция Источник, Назначение
    о movq $4, %rax
      -суффикс q - указывает что команда работает с операндами длинной в 8 байт:
         о b(byte) - 1 байт
         о w(word) - 2 байта
         о l(long) - 4 байта
         о q(quad) - 8 байтов
           -Например записать 42 в регистр al: movb $42, %al
